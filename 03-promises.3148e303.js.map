{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACrBL,EACFI,EAAQ,C,SAACN,E,MAAUC,IAEnBM,EAAO,C,SAACP,E,MAAUC,OAtCbO,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBACF,MACEC,UAAYZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAEM,cAEAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAOF,OAAOL,EAAMM,OAASD,OAAOJ,EAAKK,OAASD,OAAOH,EAAOI,MAAQ,GACxEE,EAAYH,OAAOJ,EAAKK,OAE9B,IAAIG,EAAW,EACf,IAAK,IAAIC,EAASN,EAAYM,GAAUH,EAAMG,GAAkBF,EAE1DG,YAAW,KACX1B,EAAcwB,EAAUC,GACrBE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjB0B,QAAQC,IAAI,uBAAqB5B,QAAiBC,OAClD4B,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAqB/B,QAAiBC,UAE/D+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAClB0B,QAAQC,IAAI,sBAAoB5B,QAAiBC,OACjD4B,EAAAhC,GAASiC,OAAOG,QAAQ,sBAAoBjC,QAAeC,UAE7DsB,GAAsB,IACrBC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', valuePromise);\n\nfunction valuePromise(e) {\n  e.preventDefault();\n  const {\n    elements:  {delay, step, amount}\n  } = e.currentTarget;\n\n  const firstDelay = Number(delay.value);\n  const time = Number(delay.value) + Number(step.value) * Number(amount.value - 1) ;\n  const stepDelay = Number(step.value);\n\n  let position = 1;\n  for (let delays = firstDelay; delays <= time; delays = delays + stepDelay){\n   \n        setTimeout(() => {\n        createPromise(position, delays)\n          .then(({ position, delay }) => {\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n          .catch(({ position, delay }) => {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n          position = position + 1;\n         },delays);\n     };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n  });\n  };\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","e","preventDefault","elements","delay1","step","amount","currentTarget","firstDelay","Number","value","time","stepDelay","position1","delays","setTimeout","then","console","log","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.3148e303.js.map"}