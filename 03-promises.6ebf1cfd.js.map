{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAAsBC,G,kBAadC,YAAW,WAenB,IAAuBC,EAAUC,EACzBC,GADeF,EAdDG,EAcWF,EAdDG,EAexBF,EAAgBG,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GACrBP,EACFM,EAAQ,CAACR,WAAUC,UAEnBQ,EAAO,CAACT,WAAUC,cAnBfS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBW,QAAQC,IAAI,uBAAwCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,OAC1Dc,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAwCH,OAAfd,EAAS,QAAYc,OAANb,EAAM,UAEvEiB,OAAM,SAAAP,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBW,QAAQC,IAAI,sBAAuCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,OACzDc,EAAAtB,GAASuB,OAAOG,QAAQ,sBAAqCL,OAAfd,EAAS,QAAYc,OAANb,EAAM,UAErEE,GAAsB,IACrBC,IAvBTN,EAAEsB,iBAUF,IATA,IAEmBC,EAAfvB,EAAEwB,cADJC,SAAYC,EAAKH,EAALpB,MAAOwB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAOF,OAAOJ,EAAMK,OAASD,OAAOH,EAAKI,OAASD,OAAOF,EAAOG,OAChEE,EAAYH,OAAOH,EAAKI,OAE1B1B,EAAW,EACN6B,EAASL,EAAYK,GAAUF,EAAME,GAAkBD,EAASE,EAAAD,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', valuePromise);\n\nfunction valuePromise(e) {\n  e.preventDefault();\n  const {\n    elements:  {delay, step, amount}\n  } = e.currentTarget;\n\n  const firstDelay = Number(delay.value);\n  const time = Number(delay.value) + Number(step.value) * Number(amount.value);\n  const stepDelay = Number(step.value);\n\n  let position = 1;\n  for (let delays = firstDelay; delays <= time; delays = delays + stepDelay){\n   \n        setTimeout(() => {\n        createPromise(position, delays)\n          .then(({ position, delay }) => {\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n          .catch(({ position, delay }) => {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n          position = position + 1;\n         },delays);\n     };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n  });\n  };\n"],"names":["$iU1Pc","parcelRequire","document","querySelector","addEventListener","e","setTimeout","position","delay","shouldResolve","position1","delays","Math","random","Promise","resolve","reject","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure","preventDefault","_elements","currentTarget","elements","delay1","step","amount","firstDelay","Number","value","time","stepDelay","delays1","_loop"],"version":3,"file":"03-promises.6ebf1cfd.js.map"}